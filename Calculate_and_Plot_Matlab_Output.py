## Code for MicroFEWS project. Takes output from Matalb Simulink EDM models, developed by Justus Karenzi. Extracts hourly data from CSV (originally .mat struct file).
## MJC April 2021

# Data from Simulink simulations is extracted in Matlab Command Line with the following code:
# >> T=table(out.Kong_Output.time,out.Kong_Output.signals(1).values,out.Kong_Output.signals(2).values,out.Kong_Output.signals(3).values,out.Kong_Output.signals(4).values,out.Kong_Output.signals(5).values)
# >> writetable(T,'Kong_WTP_Output.csv')
#where e.g. Kong_Output is a struct file generated by the Scope (View/Configuration Properties/Logging)


## File locations might have been changed (they were definitely changed) after project was finished, so paths would have to be adapted.
## General file format is CommunityName_FEWComponent_Capacity_PV_Capacity_BESS_Version.csv
# First two community calculations are documented nicely, others less so, but the code is essentially the same
#Each different calculation is separated by ### lines and divided into collapsible 'regions' for a cleaner setup

import scipy.io as spio
import matplotlib.pyplot as plt
import numpy as np
import os
import pandas as pd
from datetime import datetime, timedelta
import dateutil as dt
from matplotlib.dates import DateFormatter

os.chdir('C:/users/michelechamberlin/Desktop/MicroFEWs/MATLAB Simulink')




########################################################################################
# Tanana Cold Storage
########################################################################################
# region
# Import data Tanana PV 20 kWDC
data = pd.read_csv('Cold Storage/Cold_Storage_Tanana_10kW_PV_100kWh_BESS_NEW.csv', index_col='time')

#####Calculate PV coverage
Tot_Q = np.sum(data['tot_Q_load'])
Unmet_Q = np.sum(data['unmet_Q_load'])
Coverage = 1 - (Unmet_Q / Tot_Q)



# The Matlab output should have 8760 values, with indices from 0 to 8759, but it has multiple entries for
# the same hour, these are cut out here
data.index = data.index.astype(int)
data = data.reset_index().drop_duplicates(subset="time")
# create fake timeindex to have datetime index, YEAR is not relevant (remove from plots by means of Dateformatter)
# this allows to have the months and days as x axis in the plots (and the simulation data goes from 1.1 to 31.12, so that
# is acceptable/true to do.
beginning = datetime(2018, 1, 1)
date_today = datetime.now()
days = pd.date_range(beginning, beginning + timedelta(365), freq='1h')
date_ind = days[days.year == 2018]
data.index = date_ind


data.columns  # 'time', 'unmet_Q_load', 'excess_el_load', 'ESS_SOC', 'PV_gen', 'tot_Q_load'

# Change PV to cooling load provided by PV (COP=2)
data['RE_Cooling'] = data['PV_gen'] * 1 #adapt for COP, here, if wanted
# Change Date format to only show month name in plot
formatter = DateFormatter('%b')  # ('%Y-%m-%d %H:%M:%S')
data['PV_gen']


######## Subplots daily profile in 4 Seasons
#This code was copied from other FEW infrastructures, the correct column headers need to be pasted, here!
#region

fig, axs = plt.subplots(2, 2, sharex=False, sharey=False, figsize=(8,6))
X=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]
#['2018-3-21','2018-6-21','2018-9-21','2018-12-21']
ylimlow=-5
ylimhigh=30


axs[0, 0].set_title('March 21')
data_just_day = data['2018-3-21']
data_just_day.index= X
axs[0, 0].plot(data_just_day['load'], label='Water Treatment Plant Load [kW]', )
axs[0, 0].plot(data_just_day['WTG_gen'], label='WTG Generation 15 kW [kW]') #RE_cooling
#axs[0,0].xaxis.set_major_locator(mdates.MinuteLocator(interval=60*8))  # to get a tick every 15 minutes
#axs[0, 0].xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))  # optional formatting
axs[0, 0].set( ylabel='Power [kW]',xlabel='Time of Day')
axs[0,0].set_xticks([0, 6, 12, 18,23])
axs[0,0].set_xticklabels(['00:00', '06:00', '12:00', '18:00','24:00'])
axs[0,0].tick_params(axis='x',length=0)
axs[0,0].set_ylim(ylimlow,ylimhigh)
#axs[0, 0].label_outer()

axs[0, 1].set_title('June 21')
data_just_day = data['2018-6-22']
data_just_day.index= X
axs[0, 1].plot(data_just_day['load'], label='Water Treatment Plant Load [kW]')
axs[0, 1].plot(data_just_day['WTG_gen'], label='WTG Generation 15 kW [kW]')
#axs[0,0].xaxis.set_major_locator(mdates.MinuteLocator(interval=60*8))  # to get a tick every 15 minutes
#axs[0, 1].xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))  # optional formatting
axs[0, 1].set( ylabel='Power [kW]',xlabel='Time of Day')
axs[0,1].set_xticks([0, 6, 12, 18,23])
axs[0,1].set_xticklabels(['00:00', '06:00', '12:00', '18:00','24:00'])
#axs[0, 1].label_outer()
axs[0,1].tick_params(axis='x',length=0)
axs[0,1].set_ylim(ylimlow,ylimhigh)


axs[1, 0].set_title(' \n September 23')
data_just_day = data['2018-9-23']
data_just_day.index= X
axs[1, 0].plot(data_just_day['load'], label='Water Treatment Plant Load [kW]')
axs[1, 0].plot(data_just_day['WTG_gen'], label='WTG Generation 15 kW [kW]')
#axs[0,0].xaxis.set_major_locator(mdates.MinuteLocator(interval=60*8))  # to get a tick every 15 minutes
#axs[1, 0].xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))  # optional formatting
axs[1, 0].set( ylabel='Power [kW]',xlabel='Time of Day')
axs[1,0].set_xticks([0, 6, 12, 18,23])
axs[1,0].set_xticklabels(['00:00', '06:00', '12:00', '18:00','24:00'])
#axs[1, 0].label_outer()
axs[1,0].set_ylim(ylimlow,ylimhigh)

axs[1, 1].set_title(' \n  December 21')
data_just_day = data['2018-12-20']
data_just_day.index= X
axs[1, 1].plot(data_just_day['load'], label='Water Treatment Plant Load [kW]')
axs[1, 1].plot(data_just_day['WTG_gen'], label='WTG Generation 15 kW [kW]')
#axs[0,0].xaxis.set_major_locator(mdates.MinuteLocator(interval=60*8))  # to get a tick every 15 minutes
#axs[1, 1].xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))  # optional formatting
axs[1, 1].set( ylabel='Power [kW]',xlabel='Time of Day')
#axs[1, 1].label_outer()
axs[1,1].set_ylim(ylimlow,ylimhigh)


#lgd =fig.legend(handles, labels, loc=7,bbox_to_anchor=(0.5,-0.1))
#fig.savefig('samplefigure.png', bbox_extra_artists=(lgd), bbox_inches='tight')
axs[1,1].set_xticks([0, 6, 12, 18,23])
axs[1,1].set_xticklabels(['00:00', '06:00', '12:00', '18:00','24:00'])
plt.subplots_adjust(wspace=0.4, hspace=0.6,bottom=0.2)
handles, labels = axs[0,0].get_legend_handles_labels()
fig.legend(handles, labels, loc=8)
plt.savefig('Daily_Seasonal_WTP_Kong.png')


plt.show()

#endregion





############### Other Plots
#region
plt.close('all')
plt.figure(figsize=(16, 8))
plt.plot(data['tot_Q_load'], label='Cooling Demand [kW]')
# plt.plot(data['PV_gen'],label='PV Generation [kW]')
plt.plot(data['RE_Cooling'], label='Renewable Energy Cooling [kW]')
plt.plot(data['RE_Cooling']*2, label='Renewable Energy Cooling [kW]')
plt.plot(data['RE_Cooling']*3.3, label='Renewable Energy Cooling [kW]')

# plt.plot(data['excess_el_load'],label='Excess PV Generation [kW]')
# plt.plot(data['unmet_Q_load'],label='Unmet Load Q [kW]')
# plt.plot(data['ESS_SOC'],label='BESS SOC')
plt.legend()
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
plt.title('Tanana Cold Storage with PV')
plt.ylabel('Power [kW]')
plt.xlabel('time')
plt.savefig('Tanana_Cold_Storage_Full_Year')

#Plot only a part of the entire year
plt.close('all')
beginning = 4633
data_2 = data[beginning:(beginning + 192)]
formatter = DateFormatter('%b-%d')  # ('%Y-%m-%d %H:%M:%S')
plt.figure(figsize=(8, 4))
plt.plot(data_2['tot_Q_load'], label='Cooling Demand',linewidth=2.5,color='tab:green')
# plt.plot(data_2['PV_gen'],label='PV Generation [kW]')
plt.plot(data_2['RE_Cooling'], label='PV Generation (10 kW)', color= 'tab:orange')
plt.plot(data_2['RE_Cooling']*2, label='PV Generation (20 kW)',color='tab:red')
plt.plot(data_2['RE_Cooling']*5, label='PV Generation (50 kW)',color='tab:purple')

# plt.plot(data_2['excess_el_load'],label='Excess PV Generation [kW]')
# plt.plot(data_2['unmet_Q_load'],label='Unmet Load Q [kW]')
# plt.plot(data_2['ESS_SOC'],label='BESS SOC')
plt.legend()
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
#plt.title('Cold Storage with Solar PV and Battery \n')
plt.ylabel('Power [kW]')
#plt.xlabel('time')
plt.savefig('Tanana/Tanana_Cold_Storage_5_days_10kW_100kWh_3')
# endregion


# endregion


########################################################################################
# Tanana Greenhouse
########################################################################################
# region

#Read total load data and separate load files from csv and plot summarized by month
# region

from matplotlib.font_manager import FontProperties
#Thermals dataset includes the separate loads of the greenhouse, the regular greenhouse csv contains the load as
#sum of all the 'Thermals' components
#Must be imported separately, due to historic growth of Simulink model

Thermals = pd.DataFrame()
# First Dataset
data = pd.read_csv('Tanana/Tanana_Greenhouse_10_kW_PV_80_kWh_BESS_NEW_2.csv',index_col='time')
data.index = data.index.astype(int)
### The Matlab ooutput should have 8760 values, with indices from 0 to 8759, but it has multiple entries for
# the same hour, these are cut out here
data = data.reset_index().drop_duplicates(subset="time")
# create fake timeindex to have datetime index, YEAR is not relevant (remove from plots)
beginning = datetime(2018, 1, 1)
date_today = datetime.now()
days = pd.date_range(beginning, beginning + timedelta(365), freq='1h')
date_ind = days[days.year == 2018]
data.index = date_ind
##
Thermals['lighting'] = data['lighting']
Thermals['PV generation'] = data['PV_generation']

# Second Dataset
data = pd.read_csv('Tanana/Tanana_Greenhouse_Thermals_10_kW_PV_80_kWh_BESS_NEW_2.csv', index_col='time')  #
data.index = data.index.astype(int)
data = data.reset_index().drop_duplicates(subset="time")
# create fake timeindex to have datetime index, YEAR is not relevant (remove from plots)
beginning = datetime(2018, 1, 1)
date_today = datetime.now()
days = pd.date_range(beginning, beginning + timedelta(365), freq='1h')
date_ind = days[days.year == 2018]
data.index = date_ind

Thermals['conduction'] = data['conduction'] * 0.00029307107
Thermals['airflow'] = data['airflow'] * 0.00029307107
Thermals['evaporative'] = data['evaporative'] * 0.00029307107
Thermals['passive'] = data['passive'] * 0.00029307107
#Reorganize Data by month, for plot
Thermals_monthly = Thermals.resample('M').sum()
Thermals_monthly = Thermals_monthly / 1000  # Change from kWh to MWh
#Thermals_monthly['PV generation'] = Thermals_monthly['PV generation'] * 1.5

Months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']

width = 0.5
plt.close('all')
plt.figure(figsize=(8, 4))
plt.bar(Months, Thermals_monthly['conduction'], width=width, label='Conduction Heat Loss', color='tab:red')
plt.bar(Months, Thermals_monthly['airflow'], width=width, bottom=Thermals_monthly['conduction'],
        label='Air Exchange Heat Loss', color='tab:orange')
plt.bar(Months, Thermals_monthly['evaporative'], width=width,
        bottom=Thermals_monthly['conduction'] + Thermals_monthly['airflow'], label='Evaporative Heat Loss', color='tab:green')
plt.bar(Months, Thermals_monthly['lighting'], width=width,
        bottom=Thermals_monthly['conduction'] + Thermals_monthly['airflow'] + Thermals_monthly['evaporative'],
        label='Lighting Load', color='tab:purple')
plt.plot(Months, Thermals_monthly['PV generation']*2, label='PV Generation (20 kW)', color='dodgerblue')
plt.plot(Months, Thermals_monthly['PV generation']*5, label='PV Generation (50 kW)', color='navy')

#plt.xlabel('time')
plt.ylabel('Energy [MWh]')
plt.legend()  # bbox_to_anchor=(1.05, 1), loc='upper left')
plt.title('Greenhouse Load Subdivision \n')
plt.savefig('Tanana/Greenhouse_Monthly_Load_Subdivision_5.png')
# endregion

#Read data for different PV capacities to calculate RE integration and plots
for i in [10,20,30,50,10]: #10, 20, 30, 50, 100, 200,30
    # Import data Tanana PV 10 kWDC
    absb=2
    data = pd.read_csv('Tanana/Tanana_Greenhouse_' + str(i) + '_kW_PV_80_kWh_BESS.csv', # Add _NEW_2
                       index_col='time')  # Tanana_Greenhouse_10_kW_PV_80_kWh_BESS
    # The Matlab ooutput should have 8760 values, with indices from 0 to 8759, but it has multiple entries for
    # the same hour, these are cut out here
    data.index = data.index.astype(int)
    data = data.reset_index().drop_duplicates(subset="time")

    # create fake timeindex to have datetime index, YEAR is not relevant (remove from plots)
    beginning = datetime(2018, 1, 1)
    date_today = datetime.now()
    days = pd.date_range(beginning, beginning + timedelta(365), freq='1h')
    date_ind = days[days.year == 2018]
    data.index = date_ind
    # data['load_all'][data['load_all'] < 0] = 0

    data.columns  # 'time', 'PV_generation', 'unmet_post_BESS', 'dump_load', 'ESS_SOC', 'unmet_pre_BESS', 'load', 'lighting'
    ##  time,conduction,airflow,evaporative,passive
    monthly = data.resample('M').sum()
    monthly['load']

    #4 month
    #data= data[data.index>'2018-5-1'] # '2018-3-1'
    #data= data[data.index<'2018-8-31'] # '2018-10-31'
    #8 month
    #data= data[data.index>'2018-3-1'] # '2018-3-1'
    #data= data[data.index<'2018-10-31'] # '2018-10-31'

    ## Energy Balance
    print('\n Capacity:', str(i))
    Load = data['load'].sum()
    avg= Load/8760
    print('Load: ',Load, ' kWh' )
    print('Avg Load: ', Load/8760, ' kW')
    PV = data['PV_generation'].sum()
    PV_use = Load - data['unmet_pre_BESS'].sum()
    print('PV use: ', np.round(PV_use, 2), ' kWh')
    print('PV use: ', np.round(100 * PV_use / PV, 2), ' %')
    print('Load Coverage: ', np.round(100 * PV_use / Load, 2), ' %')
    BESS_throughput = data['unmet_pre_BESS'].sum() - data['unmet_post_BESS'].sum()
    print('Load Coverage with PV+ BESS: ', np.round(100 * (PV_use + BESS_throughput) / Load, 2), ' %')
    print('BESS use: ', np.round(BESS_throughput, 2), ' kWh')


##### Plot with daily profile for each season ######
# Change Date format to only show month name in plot
formatter = DateFormatter('%H:%M')  # ('%Y-%m-%d %H:%M:%S')
import matplotlib.dates as mdates
Months = ['March 21', 'June 21', 'September 23', 'December 21']








# Subplot with 4 plots, 1 for each season
#region
fig, axs = plt.subplots(2, 2, sharex=False, sharey=False, figsize=(8,6))
X=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]
#['2018-3-21','2018-6-21','2018-9-21','2018-12-21']

axs[0, 0].set_title('March 21')
data_just_day = data['2018-3-21']
data_just_day.index= X
axs[0, 0].plot(data_just_day['load'], label='Greenhouse Load [kW]', )
axs[0, 0].plot(data_just_day['PV_generation'], label='PV Generation [kW]')
#axs[0,0].xaxis.set_major_locator(mdates.MinuteLocator(interval=60*8))  # to get a tick every 15 minutes
#axs[0, 0].xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))  # optional formatting
axs[0, 0].set( ylabel='Power [kW]',xlabel='Time of Day')
axs[0,0].set_xticks([0, 6, 12, 18,23])
axs[0,0].set_xticklabels(['00:00', '06:00', '12:00', '18:00','24:00'])
axs[0,0].tick_params(axis='x',length=0)
axs[0,0].set_ylim(-5,45)
#axs[0, 0].label_outer()

axs[0, 1].set_title('June 21')
data_just_day = data['2018-6-21']
data_just_day.index= X
axs[0, 1].plot(data_just_day['load'], label='Greenhouse Load [kW]')
axs[0, 1].plot(data_just_day['PV_generation'], label='PV Generation [kW]')
#axs[0,0].xaxis.set_major_locator(mdates.MinuteLocator(interval=60*8))  # to get a tick every 15 minutes
#axs[0, 1].xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))  # optional formatting
axs[0, 1].set( ylabel='Power [kW]',xlabel='Time of Day')
axs[0,1].set_xticks([0, 6, 12, 18,23])
axs[0,1].set_xticklabels(['00:00', '06:00', '12:00', '18:00','24:00'])
#axs[0, 1].label_outer()
axs[0,1].tick_params(axis='x',length=0)
axs[0,1].set_ylim(-5,45)


axs[1, 0].set_title(' \n September 23')
data_just_day = data['2018-9-23']
data_just_day.index= X
axs[1, 0].plot(data_just_day['load'], label='Greenhouse Load [kW]')
axs[1, 0].plot(data_just_day['PV_generation'], label='PV Generation [kW]')
#axs[0,0].xaxis.set_major_locator(mdates.MinuteLocator(interval=60*8))  # to get a tick every 15 minutes
#axs[1, 0].xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))  # optional formatting
axs[1, 0].set( ylabel='Power [kW]',xlabel='Time of Day')
axs[1,0].set_xticks([0, 6, 12, 18,23])
axs[1,0].set_xticklabels(['00:00', '06:00', '12:00', '18:00','24:00'])
#axs[1, 0].label_outer()
axs[1,0].set_ylim(-5,45)

axs[1, 1].set_title(' \n  December 21')
data_just_day = data['2018-12-21']
data_just_day.index= X
axs[1, 1].plot(data_just_day['load'], label='Greenhouse Load [kW]')
axs[1, 1].plot(data_just_day['PV_generation'], label='PV Generation [kW]')
#axs[0,0].xaxis.set_major_locator(mdates.MinuteLocator(interval=60*8))  # to get a tick every 15 minutes
#axs[1, 1].xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))  # optional formatting
axs[1, 1].set( ylabel='Power [kW]',xlabel='Time of Day')
#axs[1, 1].label_outer()
axs[1,1].set_ylim(-5,45)


#lgd =fig.legend(handles, labels, loc=7,bbox_to_anchor=(0.5,-0.1))
#fig.savefig('samplefigure.png', bbox_extra_artists=(lgd), bbox_inches='tight')
axs[1,1].set_xticks([0, 6, 12, 18,23])
axs[1,1].set_xticklabels(['00:00', '06:00', '12:00', '18:00','24:00'])
plt.subplots_adjust(wspace=0.4, hspace=0.6,bottom=0.2)
handles, labels = axs[0,0].get_legend_handles_labels()
fig.legend(handles, labels, loc=8)
plt.savefig('Daily_Seasonal_Greenhouse.png')
plt.show()

#endregion



#More plots

plt.close('all')
plt.figure(figsize=(8, 4))
data_daily = data.resample('d').sum()
plt.plot(data_daily['load'], label='Greenhouse Load [kWh]')
plt.plot(data_daily['PV_generation'], label='PV Generation [kWh]')
# plt.plot(data['unmet_pre_BESS'], label='Unmet Load PV [kW]')
# plt.plot(data['unmet_post_BESS'], label='Unmet Load BESS [kW]')
# plt.plot(data['ESS_SOC'],label='BESS SOC [%]')
plt.legend()
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
plt.title('Tanana Greenhouse Load and PV Generation \n')
plt.ylabel('Energy [kWh]')  # 'Power [kW]') #
plt.xlabel('time')
plt.savefig('Tanana_Greenhouse_Full_Year_daily')

plt.close('all')
data_2 = data[2000:2120]
formatter = DateFormatter('%m-%d')  # ('%Y-%m-%d %H:%M:%S')
plt.figure(figsize=(16, 8))
plt.plot(data[' tot_load_Q'], label='Load Q [kW]')
plt.plot(data[' PV_generation'], label='PV Generation [kW]')
plt.plot(data[' excess_PV'], label='Excess PV Generation [kW]')
plt.plot(data[' unmet_load_Q'], label='Unmet Load Q [kW]')
plt.plot(data[' BESS_SOC'], label='BESS SOC [%]')
plt.legend()
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
plt.title('Tanana Greenhouse with PV and BESS')
plt.ylabel('Power [kW]')
plt.xlabel('time')
plt.savefig('Tanana_Greenhouse_5_days')

# endregion


########################################################################################
# Tanana WTP
########################################################################################
# region


for i in [15]:  ##10,20,30,50,100,200
    # Import data Tanana PV 10 kWDC
    data = pd.read_csv('Tanana/T_WTP_' + str(i) + '_PV_100_BESS_New.csv',
                       index_col='time')  # Tanana_Greenhouse_10_kW_PV_80_kWh_BESS
    
    # The Matlab ooutput should have 8760 values, with indices from 0 to 8759, but it has multiple entries for
    # the same hour, these are cut out here
    data.index = data.index.astype(int)
    data = data.reset_index().drop_duplicates(subset="time")

    # create fake timeindex to have datetime index, YEAR is not relevant (remove from plots)
    beginning = datetime(2018, 1, 1)
    date_today = datetime.now()
    days = pd.date_range(beginning, beginning + timedelta(365), freq='1h')
    date_ind = days[days.year == 2018]
    data.index = date_ind
    # data['load_all'][data['load_all'] < 0] = 0

    data.columns  # 'time', 'PV_gen', 'load', 'load_pre_BESS', 'load_post_BESS', 'ESS_SOC', 'Fuel_usage_L'
    ##  time,conduction,airflow,evaporative,passive

    #Calibrate timeseries to coincide with actual electrical energy consumption from ANTHC report
    # Total Electricity Consumption in Tanana is: 96326 kWh
    data['load']= data['load']*(96326/data['load'].sum())
    monthly = data.resample('M').sum()
    monthly['load']

    ## Energy Balance
    print('\n Capacity:', str(i))
    Load = data['load'].sum()
    PV = data['PV_gen'].sum()
    print('Load: ', Load)
    print('Load: ', Load/8760)
    PV_use = Load - data['load_pre_BESS'].sum()
    print('PV used: ', np.round(PV_use, 2), ' kWh')
    print('PV used: ', np.round(100 * PV_use / PV, 2), ' %')
    print('Load Coverage: ', np.round(100 * PV_use / Load, 2), ' %')
    BESS_throughput = data['load_pre_BESS'].sum() - data['load_post_BESS'].sum()
    print('Load Coverage with BESS: ', np.round(100 * (PV_use + BESS_throughput) / Load, 2), ' %')
    print('BESS use: ', np.round(BESS_throughput, 2), ' kWh')
    print('BESS cycles: ', np.round(BESS_throughput / 100, 2), ' full cap cycles')

# Change Date format to only show month name in plot
formatter = DateFormatter('%b')  # ('%Y-%m-%d %H:%M:%S')
plt.close('all')
plt.figure(figsize=(8, 4))
data_hourly = data.resample('2h').mean()
plt.plot(data_hourly['PV_gen']*2, label='PV Generation [kW]', c='tab:orange')
plt.plot(data_hourly['load'], label='Water Treatment Load [kW]', c='tab:blue')

# plt.plot(data_hourly['load_pre_BESS'], label='Unmet Load PV [kW]')
# plt.plot(data_hourly['load_post_BESS'], label='Unmet Load BESS [kW]')
# plt.plot(data_hourly['ESS_SOC'],label='BESS SOC [%]')
plt.legend()
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
plt.title('Water Treatment Plant Load and PV Generation \n')
plt.ylabel('Power [kW]')  # 'Energy [kWh]')   #
plt.xlabel('time')
plt.savefig('Tanana/Tanana_WTP_Full_Year_hourly_30_PV_100_BESS_New_2')

# new plot
plt.close('all')
plt.figure(figsize=(8, 4))
data_daily = data.resample('d').sum()
plt.plot(data_daily['load'], label='Greenhouse Load [kWh]')
plt.plot(data_daily['PV_gen'], label='PV Generation [kWh]')
# plt.plot(data['unmet_pre_BESS'], label='Unmet Load PV [kW]')
# plt.plot(data['unmet_post_BESS'], label='Unmet Load BESS [kW]')
# plt.plot(data['ESS_SOC'],label='BESS SOC [%]')
plt.legend()
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
plt.title('Tanana Water Treatment Plant Load and PV Generation \n')
plt.ylabel('Energy [kWh]')  # 'Power [kW]') #
plt.xlabel('time')
plt.savefig('Tanana_WTP_Full_Year_daily')

plt.close('all')
data_2 = data[2000:2120]
formatter = DateFormatter('%m-%d')  # ('%Y-%m-%d %H:%M:%S')
plt.figure(figsize=(16, 8))
plt.plot(data[' tot_load_Q'], label='Load Q [kW]')
plt.plot(data[' PV_generation'], label='PV Generation [kW]')
plt.plot(data[' excess_PV'], label='Excess PV Generation [kW]')
plt.plot(data[' unmet_load_Q'], label='Unmet Load Q [kW]')
plt.plot(data[' BESS_SOC'], label='BESS SOC [%]')
plt.legend()
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
plt.title('Tanana Greenhouse with PV and BESS')
plt.ylabel('Power [kW]')
plt.xlabel('time')
plt.savefig('Tanana_Greenhouse_5_days')

# endregion


########################################################################################
# Kongiganak WTP NEW
########################################################################################
# region


for i in [15]:  ##10,20,30,50,100,200
    # Import data Tanana PV 10 kWDC
    data = pd.read_csv('Kongiganak/Kong_WTP_' + str(i) + '_WTG_100_BESS_NEW_Calib.csv',
                       index_col='time')  # Tanana_Greenhouse_10_kW_PV_80_kWh_BESS
    data.index = data.index.astype(int)
    data = data.reset_index().drop_duplicates(subset="time")
    data = data[0:8760]

    # create fake timeindex to have datetime index, YEAR is not relevant (remove from plots)
    beginning = datetime(2018, 1, 1)
    date_today = datetime.now()
    days = pd.date_range(beginning, beginning + timedelta(365), freq='1h')
    date_ind = days[days.year == 2018]
    data.index = date_ind
    # data['load_all'][data['load_all'] < 0] = 0

    data.columns  # 'time', 'load_post_BESS', 'dump_load', 'BESS_SOC', 'load_pre_BESS',  'WTG_gen', 'load'
    ##  time,conduction,airflow,evaporative,passive

    # Calibrate timeseries to coincide with actual electrical energy consumption from ANTHC report
    # Total Electricity Consumption in Tanana is: 68138 kWh
    data['load'] = data['load'] * (68138 / data['load'].sum())

    ## Energy Balance
    print('\n Capacity:', str(i))
    Load = data['load'].sum()
    Load/8760
    WTG = data['WTG_gen'].sum()
    print('Load: ', Load)
    WTG_use = Load - data['load_pre_BESS'].sum()
    print('WTG used: ', np.round(WTG_use, 2), ' kWh')
    print('WTG used: ', np.round(100 * WTG_use / WTG, 2), ' %')
    print('Load Coverage: ', np.round(100 * WTG_use / Load, 2), ' %')
    BESS_throughput = data['load_pre_BESS'].sum() - data['load_post_BESS'].sum()
    print('Load Coverage with BESS: ', np.round(100 * (WTG_use + BESS_throughput) / Load, 2), ' %')
    print('BESS use: ', np.round(BESS_throughput, 2), ' kWh')
    print('BESS cycles: ', np.round(BESS_throughput / 100, 2), ' full cap cycles')

# Change Date format to only show month name in plot
formatter = DateFormatter('%b')  # ('%Y-%m-%d %H:%M:%S')
plt.close('all')
plt.figure(figsize=(8, 4))
data_hourly = data.resample('1h').sum()
plt.plot(data_hourly['WTG_gen'], label='Wind Generation [kW]', c='tab:orange')
plt.plot(data_hourly['load'], label='Water Treatment Load [kW]', c='tab:blue')
# plt.plot(data_hourly['load_pre_BESS'], label='Unmet Load PV [kW]')
plt.plot(data_hourly['load_post_BESS'], label='Unmet Load BESS [kW]', c='green')
plt.plot(data_hourly['BESS_SOC'], label='BESS SOC [%]', c='tab:purple')
plt.legend()
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
plt.title('Tanana Water Treatment Plant Load and PV Generation \n')
plt.ylabel('Power [kW]')  # 'Energy [kWh]')   #
plt.xlabel('time')
plt.savefig('Kong_WTP_Full_Year_hourly_21_WTG_100_BESS')

#new plot
plt.close('all')
formatter = DateFormatter('%b-%d')  # ('%Y-%m-%d %H:%M:%S')
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 6), sharex=True)  #fig, (ax1, ax2,ax3) = plt.subplots(3, 1, figsize=(8, 6), sharex=True)
ax1.xaxis.set_major_formatter(formatter)
ax2.xaxis.set_major_formatter(formatter)
#ax3.xaxis.set_major_formatter(formatter)
data_hourly = data.resample('2h').mean()
data_hourly = data_hourly[1650:2140]
ax1.plot(data_hourly['WTG_gen'], label='Wind Generation [kW]', c='tab:orange')
ax2.plot(data_hourly['load'], label='Water Treatment Load [kW]', c='tab:blue')
ax2.plot(data_hourly['load_post_BESS'], label='Water Treatment Load [kW]', c='tab:green')
ax2.set_ylim([-2, 20])
# line3, = ax1.plot(X, PV, color='orange',label='that')
# line4, = ax1.plot(X, WEC, color='blue',label='that')
#ax3.plot(data_hourly['BESS_SOC'], label='BESS SOC [%]', c='tab:purple')
# line11, = ax2.plot(X, BESS_Power, color='red')
# line = [line1,line2,line10]
ax1.legend(['Wind Generation', ' Load'], loc=1)
ax2.legend(['Water Treatment Load', 'Remaining Load'], loc=1)
ax1.set_ylabel('Power [kW]')
ax2.set_ylabel('Power [kW]')
#ax3.legend(['Battery SOC'], loc=1)
#fig.suptitle('Washeteria with Renewable Energy and Battery Storage')
plt.savefig('Kongiganak/Kongiganak_WTP_Part_Year_hourly_15_WTG_100_WTG_3')

plt.close('all')
plt.figure(figsize=(8, 4))
data_daily = data.resample('d').sum()
plt.plot(data_daily['load'], label='Greenhouse Load [kWh]')
plt.plot(data_daily['PV_gen'], label='PV Generation [kWh]')
# plt.plot(data['unmet_pre_BESS'], label='Unmet Load PV [kW]')
# plt.plot(data['unmet_post_BESS'], label='Unmet Load BESS [kW]')
# plt.plot(data['ESS_SOC'],label='BESS SOC [%]')
plt.legend()
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
plt.title('Tanana Water Treatment Plant Load and PV Generation \n')
plt.ylabel('Energy [kWh]')  # 'Power [kW]') #
plt.xlabel('time')
plt.savefig('Tanana_WTP_Full_Year_daily')

plt.close('all')
data_2 = data[2000:2120]
formatter = DateFormatter('%m-%d')  # ('%Y-%m-%d %H:%M:%S')
plt.figure(figsize=(16, 8))
plt.plot(data[' tot_load_Q'], label='Load Q [kW]')
plt.plot(data[' PV_generation'], label='PV Generation [kW]')
plt.plot(data[' excess_PV'], label='Excess PV Generation [kW]')
plt.plot(data[' unmet_load_Q'], label='Unmet Load Q [kW]')
plt.plot(data[' BESS_SOC'], label='BESS SOC [%]')
plt.legend()
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
plt.title('Tanana Greenhouse with PV and BESS')
plt.ylabel('Power [kW]')
plt.xlabel('time')
plt.savefig('Tanana_Greenhouse_5_days')

# endregion


########################################################################################
     #Cordova Hydro
########################################################################################
# region
# Import data Cordova 6MW
    for capacity in [5, 6, 7, 8, 9, 10, 7.25]:  # 5, 6, 7, 8, 9, 10

        data = pd.read_csv('Cordova/Cordova_Hydro_Avail_' + str(capacity) + '_MW_HE_1_MW_BESS.csv', index_col='time')

        ############ Correct index because simulation has 'weird' issue of producing sub-resolution steps (with identical values to full step values. Cut these values to receive full 8760 year data.
        data.index = data.index.astype(int)
        data = data.reset_index().drop_duplicates(subset="time")
        data = data[0:8760]
        if 'time' in data:
            data.index = data['time']

        # create fake timeindex to have datetime index, YEAR is not relevant (remove from plots)
        beginning = datetime(2018, 1, 1)
        date_today = datetime.now()
        days = pd.date_range(beginning, beginning + timedelta(365), freq='1h')
        date_ind = days[days.year == 2018]
        data.index = date_ind
        data.columns  # 'time', ' hydro_avail', ' hydro_intalled', 'load', 'load_pre_BESS','unmet_load'

    # Loads in MWh
    Hydro_avail = np.sum(data['hydro_avail']) / 1000

    Hydro_installed = np.sum(data['hydro_intalled']) / 1000
    Tot_Load = np.sum(data['load']) / 1000
    Tot_Load/8760
    Load_post_HE = np.sum(data['load_pre_BESS']) / 1000
    Load_post_BESS = np.sum(data['unmet_load']) / 1000
    Hydro_used = Tot_Load - Load_post_HE
    Spilled = Hydro_installed - Hydro_used

    print(capacity)
    print('Load covered by Hydro:')
    print(Tot_Load - Load_post_HE, ' MWh')
    print((Tot_Load - Load_post_HE) / Tot_Load, ' %')
    print('"Spilled":')
    print(Spilled, ' MWh')
    print('Load covered by BESS:')
    print(Load_post_HE - Load_post_BESS, ' MWh')
    print((Load_post_HE - Load_post_BESS) / Tot_Load, ' %')
    print('Load covered by both:')
    print((Tot_Load - Load_post_BESS) / Tot_Load, ' %')
    print('Percentage decrease in Spill: ')
    print((Load_post_HE - Load_post_BESS) / Spilled, ' % \n')

# Change Date format to only show month name in plot
formatter = DateFormatter('%b')  # ('%Y-%m-%d %H:%M:%S')
plt.close('all')
plt.figure(figsize=(8, 4))
plt.plot(data['hydro_avail'], label='Available Hydropower [kW]')
plt.plot(data['hydro_intalled'], label='Operational Hydropower [kW]')
plt.plot(data['load'], label='Community Load [kW]')
# plt.plot(data['ESS_SOC'],label='BESS SOC')
plt.legend()
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
plt.title('Cordova Available Hydropower \n')
plt.ylabel('Power [kW]')
#plt.xlabel('time')
plt.savefig('Cordova_Hydro_Full_Year_3')

formatter = DateFormatter('%b-%d')  # ('%Y-%m-%d %H:%M:%S')
plt.close('all')
beginning = 4060
data_2 = data[beginning:(beginning + 120)]
plt.figure(figsize=(8, 4))
plt.plot(data_2['Hydro_avail'], label='Available Hydropower  [kW]')
plt.plot(data_2['Hydro_used'], label='Operational Hydropower [kW]')
plt.plot(data_2['load'], label='Community Load [kW]')

# plt.plot(data_2['ESS_SOC'],label='BESS SOC')
plt.legend()
plt.gcf().axes[0].xaxis.set_major_formatter(formatter)
plt.title('Cordova Hydropower Potential \n')
plt.ylabel('Power [kW]')
plt.xlabel('time')
plt.savefig('Cordova_Hydro_5_days_22')

#endregion


########################################################################################
## Plot for Diesel fuel curve and WTG power curve for Appendix MDPI paper
########################################################################################

#region
import matplotlib.pyplot as plt
import numpy as np
import os

os.chdir('C:/users/michelechamberlin/Desktop/MicroFEWs')
#Diesel Gen
X=[1285, 963.7,642.5,312.3,128.5]
Y=[333,247,167,95,52]

plt.figure(figsize=(6,4))
plt.plot(X,Y)
plt.ylabel('Fuel Consumption [l/hr]')
plt.xlabel('Power Output [kW]')
plt.grid()
plt.savefig('FuelCurve_DieselGen_CAT3515B_1285kW_Yak.png')

#WTG
Y=[0 ,0 ,0 ,300, 580 ,1260 ,2350 ,3880 ,5930, 8745 ,12560, 16300, 19600 ,21000, 20000 ,17500, 15500 ,14000 ,13800, 0, 0 ,0 ,0]
X=[1, 2, 2.5 ,3, 4 ,5, 6 ,7, 8 ,9, 10 ,11, 12 ,13 ,14, 15, 16, 17, 18, 19, 20, 21 ,22]
Y = np.array(Y)
Y= Y/1000 #W to kW

plt.figure(figsize=(6,4))
plt.plot(X,Y)
plt.xlabel('Wind Speed [m/s]')
plt.ylabel('Power Output [kW]')
plt.grid()
plt.savefig('WindSpeed_Power_Windmatic_JK_15kW.png')


#endregion






